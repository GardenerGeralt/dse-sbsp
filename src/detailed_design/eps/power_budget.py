
class PowerBudget:
    def __init__(self, p_aocs_peak, p_cdh_peak, p_gnc_peak, p_prop_peak, p_struct_peak, p_ther_peak,p_pow_peak,
                 p_aocs_ecl, p_cdh_ecl, p_gnc_ecl, p_prop_ecl, p_struct_ecl, p_ther_ecl, p_pow_ecl):
        """
        :param p_aocs: AOCS Power requirement [W]
        :param p_cdh: Command & Data Handeling power requirement [W]
        :param p_gnc: Guidance, navigation & control power requirement [W]
        :param p_prop: Propulsion power requirement [W]
        :param p_struct: Structures power requirement [W]
        :param p_ther: Thermal subsystem power requirement [W]
        _peak refers to peak, _ecl refers to eclipse
        """
        self.p_aocs_peak = p_aocs_peak
        self.p_cdh_peak = p_cdh_peak
        self.p_gnc_peak = p_gnc_peak
        self.p_prop_peak = p_prop_peak
        self.p_struct_peak = p_struct_peak
        self.p_ther_peak = p_ther_peak
        self.p_pow_peak = p_pow_peak

        self.p_aocs_ecl = p_aocs_ecl
        self.p_cdh_ecl = p_cdh_ecl
        self.p_gnc_ecl = p_gnc_ecl
        self.p_prop_ecl = p_prop_ecl
        self.p_struct_ecl = p_struct_ecl
        self.p_ther_ecl = p_ther_ecl
        self.p_pow_ecl = p_pow_ecl

        self.peak_power_budget = self.calc_peak_power_budget()
        self.eclipse_power_budget = self.calc_eclipse_power_budget()

    def calc_peak_power_budget(self):
        """Sum all subsystem power requirements to find power that must be generated by collection system"""
        return sum([self.p_aocs_peak, self.p_cdh_peak, self.p_gnc_peak,
                    self.p_prop_peak, self.p_struct_peak, self.p_ther_peak, self.p_pow_peak])

    def calc_eclipse_power_budget(self):
        """Sum all subsystem power requirements to find power that must be generated by collection/batteries"""
        return sum([self.p_aocs_ecl, self.p_cdh_ecl, self.p_gnc_ecl,
                    self.p_prop_ecl, self.p_struct_ecl, self.p_ther_ecl, self.p_pow_ecl])

class BatteriesBusPower:
    def __init__(self, p_req, t_eclipse, E_spec, E_dens, DoD, bat_eff, t_orb, t_mission, m_battery, exergy):
        """
        :param p_req: Required power by all bus subsystems [W]
        :param t_eclipse: eclipse time [hours]
        :param E_spec: specific energy [J/kg]
        :param E_dens: energy density [J/mÂ³]
        :param DoD: Depth of discharge [-]
        :param bat_eff: battery discharge efficiency [-]
        :param t_orb: orbital period [hours]
        :param t_mission: mission time [years]
        :param m_battery: Mass of individual battery [kg]
        :param exergy: amount of energy required to produce 1 kWh of battery [kWh/kWh]
        """

        self.p_req = p_req
        self.t_eclipse = t_eclipse
        self.E_spec = E_spec
        self.E_dens = E_dens
        self.DoD = DoD
        self.bat_eff = bat_eff
        self.t_orb = t_orb
        self.t_mission = t_mission
        self.m_battery = m_battery
        self.exergy = exergy

        self.stored_energy = self.calc_battery_energy()
        self.battery_mass = self.calc_battery_mass()
        self.battery_volume = self.calc_battery_volume()
        self.n_discharges = self.calc_n_discharges()
        self.n_batteries = self.calc_n_batteries()

        self.energy_per_energy = 65  # kWh required per kWh of battery capacity

    def calc_battery_energy(self):
        """Calculate required battery storage [Wh]"""
        return self.p_req * self.t_eclipse/(self.DoD*self.bat_eff)

    def calc_battery_mass(self):
        """Calculate batteries total mass based on specific energy [kg]"""
        return self.stored_energy / self.E_spec

    def calc_battery_volume(self):
        """Calculate batteries total volume based on energy density [L]"""
        return self.stored_energy / self.E_dens

    def calc_n_discharges(self):
        """Calculate number of discharges based on orbital period and mission time"""
        return self.t_mission * 365 * 24 / self.t_orb

    def calc_n_batteries(self):
        """Calculate number of batteries based on total battery mass and mass of one battery"""
        return self.battery_mass / self.m_battery

    def calc_battery_exergy(self):
        """Calculate energy required to produce the batteries"""
        return self.stored_energy*1000 / self.exergy

# class PowerMass:
#     def __init__(self, ):
